# .github/workflows/game-server-build-and-deploy.yml
name: 🎮 Build and Deploy Game Server

on:
  push:
    branches: [main]
    paths: 
      - 'game-server/**'  # 게임 서버 코드 변경 시에만 실행
      - '.github/workflows/game-server-build-and-deploy.yml'  # 워크플로 파일 변경 시에도 실행
  
  # 수동 실행도 가능하게 설정
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Custom version tag (e.g., v3.1.3)'
        required: false
        default: 'auto'

env:
  REGISTRY: 172.30.1.64:32000
  IMAGE_NAME: drawguess/game-server

jobs:
  build-and-push:
    name: 🔨 Build Multi-Architecture Image
    runs-on: self-hosted  # 라즈베리파이 runner 사용
    outputs:
      version: ${{ steps.version.outputs.version }}
      short_sha: ${{ steps.version.outputs.short_sha }}
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 히스토리 가져오기 (버전 태깅용)
      
      - name: 🏷️ Generate Version Tag
        id: version
        run: |
          if [ "${{ github.event.inputs.version_tag }}" != "auto" ] && [ "${{ github.event.inputs.version_tag }}" != "" ]; then
            # 수동 입력 버전 사용
            VERSION="${{ github.event.inputs.version_tag }}"
          else
            # 자동 버전 생성: v3.1.x 형태로 증가
            LAST_TAG=$(git tag -l "v*" | sort -V | tail -1)
            if [ -z "$LAST_TAG" ]; then
              VERSION="v3.1.3"  # 첫 번째 태그
            else
              # 마지막 숫자 증가 (v3.1.2 -> v3.1.3)
              VERSION=$(echo $LAST_TAG | awk -F. '{$NF = $NF + 1; print}' OFS=.)
            fi
          fi
          
          echo "Generated version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "short_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      
      - name: 🔧 Verify Docker Buildx
        run: |
          # 현재 사용 중인 builder 확인
          echo "Current buildx setup:"
          docker buildx ls
          docker buildx inspect multiarch-builder
          
          # multiarch-builder 사용 설정
          docker buildx use multiarch-builder
      
      - name: 🏗️ Build and Push Multi-Architecture Image
        working-directory: ./game-server  # Dockerfile이 있는 디렉토리
        run: |
          echo "🔨 Building image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
          
          # 멀티 아키텍처 빌드 및 Push
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }} \
            --tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            --push \
            --build-arg VERSION=${{ steps.version.outputs.version }} \
            --build-arg COMMIT_SHA=${{ steps.version.outputs.short_sha }} \
            .
          
          echo "✅ Successfully built and pushed:"
          echo "   - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"
          echo "   - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
      
      - name: 📊 Build Summary
        run: |
          echo "## 🎮 DrawGuess Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Built Image" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms**: \`linux/amd64\`, \`linux/arm64\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: \`${{ steps.version.outputs.short_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Update GitOps manifest with new image tag" >> $GITHUB_STEP_SUMMARY
          echo "2. ArgoCD will automatically sync within 3 minutes" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor deployment at: http://172.30.1.105" >> $GITHUB_STEP_SUMMARY
          
          echo "✅ Successfully built: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version.outputs.version }}"

  update-gitops:
    name: 📝 Update GitOps Manifest
    needs: build-and-push
    runs-on: self-hosted
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: 📝 Update Deployment Image Tag
        run: |
          MANIFEST_FILE="gitops/manifests/drawguess-game/deployment.yaml"
          NEW_IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }}"
          NEW_VERSION="${{ needs.build-and-push.outputs.version }}"
          
          echo "📝 Updating $MANIFEST_FILE"
          echo "🔄 New image: $NEW_IMAGE"
          echo "🏷️ New version: $NEW_VERSION"
          
          # yq를 사용해서 이미지 태그와 버전 라벨 업데이트
          yq eval '.spec.template.spec.containers[0].image = "'$NEW_IMAGE'"' -i $MANIFEST_FILE
          yq eval '.metadata.labels.version = "'$NEW_VERSION'"' -i $MANIFEST_FILE  
          yq eval '.spec.template.metadata.labels.version = "'$NEW_VERSION'"' -i $MANIFEST_FILE
          
          # 변경 사항 확인
          echo ""
          echo "✅ Updated deployment.yaml:"
          echo "📦 Image: $(yq eval '.spec.template.spec.containers[0].image' $MANIFEST_FILE)"
          echo "🏷️ Metadata version: $(yq eval '.metadata.labels.version' $MANIFEST_FILE)"  
          echo "🏷️ Template version: $(yq eval '.spec.template.metadata.labels.version' $MANIFEST_FILE)"
      
      - name: 🚀 Commit and Push GitOps Changes
        run: |
          # Git 설정
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # 변경 사항 확인
          if git diff --quiet; then
            echo "ℹ️ No changes to commit"
            exit 0
          fi
          
          # 변경 사항 커밋
          git add gitops/manifests/drawguess-game/deployment.yaml
          git commit -m "🚀 Update game server image to ${{ needs.build-and-push.outputs.version }}

          Auto-generated by CI/CD pipeline
          
          - Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }}
          - Commit: ${{ needs.build-and-push.outputs.short_sha }}
          - Trigger: ArgoCD will sync within 3 minutes"
          
          # 푸시
          git push origin main
          
          echo "✅ Successfully updated GitOps manifest"
      
      - name: 📊 GitOps Update Summary
        run: |
          echo "## 🚀 GitOps Update Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Updated Manifest" >> $GITHUB_STEP_SUMMARY
          echo "- **File**: \`gitops/manifests/drawguess-game/deployment.yaml\`" >> $GITHUB_STEP_SUMMARY
          echo "- **New Image**: \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ⏱️ Next Steps (Automatic)" >> $GITHUB_STEP_SUMMARY
          echo "1. ✅ ArgoCD detects Git changes (within 3 minutes)" >> $GITHUB_STEP_SUMMARY
          echo "2. 🔄 Kubernetes deployment rollout starts" >> $GITHUB_STEP_SUMMARY
          echo "3. 🎮 New game server version goes live" >> $GITHUB_STEP_SUMMARY
          echo "4. 📊 Monitor at: http://172.30.1.105" >> $GITHUB_STEP_SUMMARY